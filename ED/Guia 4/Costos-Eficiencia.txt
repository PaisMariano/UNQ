-Dar el orden de complejidad de las siguientes funciones:


-- O(1) == O(1)
head’ :: [a] -> a
head’ (x:xs) = x


--O(9) == O(1) Es constante xq independientemente del numero, realiza la misma cantidad de
--operaciones.
sumar :: Int -> Int
sumar x = x + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1


--O(n), siendo n el valor del numero.
--Es lineal xq recorre el numero.
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n-1)


--O(n), siendo n la longitud de la lista. 
--Es lineal xq recorre la lista.
longitud :: [a] -> Int
longitud [] = 0
longitud (x:xs) = 1 + longitud xs


--O(n . m) == O (n . n) == O (n ^ 2)
--Es cuadratica xq recorre tanto la lista, como el numero.
factoriales :: [Int] -> [Int]
factoriales [] = []
factoriales (x:xs) = factorial x : factoriales xs


--O(n), siendo n el tamaño de la lista.
--Es lineal xq recorre toda la lista.
pertenece :: Eq a => a -> [a] -> Bool
pertenece n [] = False
pertenece n (x:xs) = n == x || pertenece n xs


--O(n . n) == O (n ^ 2), siendo n el tamaño de la lista.
--Es cuadratica xq recorre la lista 2 veces. (Es decir, por cada elemento se llama a --pertenece.)
sinRepetidos :: Eq a => [a] -> [a]
sinRepetidos [] = []
sinRepetidos (x:xs) =
		if pertenece x xs
			then sinRepetidos xs
			else x : sinRepetidos xs


-- equivalente a (++)
--O(n), siendo n el tamaño de la (primer) lista.
--Es lineal porque recorre la primer lista.
append :: [a] -> [a] -> [a]
append [] ys = ys
append (x:xs) ys = x : append xs ys


--O (m . n) == O(n ^ 2), siendo n el tamaño de la la lista. Y m el tamaño de cada string.
--Es cuadratica xq se concatena cada elemento.
concatenar :: [String] -> String
concatenar [] = []
concatenar (x:xs) = x ++ concatenar xs

--O(n), siendo n el numero.
-Es lineal xq se recorre simultaneamente la lista y el numero.
takeN :: Int -> [a] -> [a]
takeN 0 xs = []
takeN n [] = []
takeN n (x:xs) = x : takeN (n-1) xs

--O(n), siendo numero.
-Es lineal xq se recorre simultaneamente la lista y el numero.
dropN :: Int -> [a] -> [a]
dropN 0 xs = xs
dropN n [] = []
dropN n (x:xs) = dropN (n-1) xs

--O(2n) == O(n)
--Es lineal xq recorre 2 veces la lista.
partir :: Int -> [a] -> ([a], [a])
partir n xs = (takeN n xs, dropN n xs)

--x
--O(n), siendo n el largo de la lista.
--Es lineal xq recorre la lista.
minimo :: Ord a => [a] -> a
minimo [x] = x
minimo (x:xs) = min x (minimo xs)

--O(n), siendo n el largo de la lista en el peor de los casos.
--Es lineal xq recorre la lista.
sacar :: Eq a => a -> [a] -> [a]
sacar n [] = []
sacar n (x:xs) =
	if n == x
		then xs
		else x : sacar n xs

--O(n^2), siendo n el tamañano de la lista.
--Es cuadratica xq x cada elemento llama a sacar. 
ordenar :: Ord a => [a] -> [a]
ordenar [] = []
orderar xs =
	let m = minimo xs
	in m : ordenar (sacar m xs)