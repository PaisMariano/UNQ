SOLID
Principles

    Single Responsibility
    Open/closed
    Liskov substitution
    Interface segregation
    Dependency inversion

In object-oriented computer programming, the term SOLID is a mnemonic acronym for five design principles intended to make software designs more understandable, flexible and maintainable. The principles are a subset of many principles promoted by Robert C. Martin.[1][2][3] Though they apply to any object-oriented design, the SOLID principles can also form a core philosophy for methodologies such as agile development or adaptive software development.[3] The theory of SOLID principles was introduced by Martin in his 2000 paper Design Principles and Design Patterns,[2][4] although the SOLID acronym itself was introduced later by Michael Feathers.[5]
Concepts

Single responsibility principle[6]
    a class should have only a single responsibility (i.e. changes to only one part of the software's specification should be able to affect the specification of the class).
Open/closed principle[7]
    "software entities â€¦ should be open for extension, but closed for modification."
Liskov substitution principle[8]
    "objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program." See also design by contract.
Interface segregation principle[9]
    "many client-specific interfaces are better than one general-purpose interface."[4]
Dependency inversion principle[10]
    one should "depend upon abstractions, [not] concretions."[4] 
